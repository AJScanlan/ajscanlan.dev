---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getEntry } from "astro:content";
import Callout from "@/components/Callout.astro";
import ReadingProgress from "@/components/ReadingProgress.astro";
import SectionBreak from "@/components/SectionBreak.astro";

export async function getStaticPaths() {
    const { getCollection } = await import("astro:content");
    
    // Collect all content types (excluding drafts)
    const collections = ['thoughts', 'notes', 'cheat-sheets', 'logs'] as const;
    
    const allPosts = await Promise.all(
        collections.map(async (collection) => {
            const posts = await getCollection(
                collection,
                ({ data }) => data.status === "published",
            );
            return posts.map((post) => ({
                params: { slug: post.slug },
                props: { collection, entry: post },
            }));
        })
    );
    
    return allPosts.flat();
}

const { slug } = Astro.params;
const { collection, entry: propsEntry } = Astro.props;

// Fetch the entry (using props for efficiency)
const entry = propsEntry || await getEntry(collection, slug);
if (!entry) throw new Error(`Post not found: ${slug}`);

const { Content } = await entry.render();
const { data } = entry;
---

<BaseLayout
    title={`${data.title} - ajscanlan.dev`}
    description={data.dek}
>
    <ReadingProgress />
    <article class="prose dark:prose-invert prose-text max-w-prose">
        <header class="mb-rhythm-8">
            <h1 class="mb-rhythm-2">{data.title}</h1>
            <p class="text-ink-600 dark:text-ink-400 text-sm">
                {/* cheat-sheets use updated date, others use date */}
                {('date' in data && data.date) && (
                    <time>
                        {new Date(data.date).toLocaleDateString("en-IE", {
                            year: "numeric",
                            month: "short",
                            day: "2-digit",
                        })}
                    </time>
                )}
                {('updated' in data && data.updated && !('date' in data)) && (
                    <time>
                        {new Date(data.updated).toLocaleDateString("en-IE", {
                            year: "numeric",
                            month: "short",
                            day: "2-digit",
                        })}
                    </time>
                )}
                {('date' in data && 'updated' in data && data.updated) && (
                    <span>
                        {" "}Â· updated {new Date(data.updated).toLocaleDateString("en-IE")}
                    </span>
                )}
            </p>
        </header>
        <Content components={{ Callout, SectionBreak }} />
    </article>
</BaseLayout>
